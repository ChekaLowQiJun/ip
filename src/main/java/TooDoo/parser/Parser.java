package toodoo.parser;

import toodoo.exceptions.DateTimeConflictException;
import toodoo.exceptions.EmptyDeadlineException;
import toodoo.exceptions.EmptyDescriptionException;
import toodoo.exceptions.EmptyFromException;
import toodoo.exceptions.EmptyIndexException;
import toodoo.exceptions.EmptyRegexException;
import toodoo.exceptions.EmptyTaskListException;
import toodoo.exceptions.EmptyToException;
import toodoo.exceptions.IndexDoesNotExistException;
import toodoo.exceptions.TaskAlreadyMarkedException;
import toodoo.exceptions.TaskAlreadyUnmarkedException;
import toodoo.exceptions.UnknownKeywordException;
import toodoo.tasklist.TaskList;

/**
 * The Parser is used by TooDoo to receive and process the input by the user.
 */
public class Parser {

    /**
     * Returns a String representing the Keyword of the user's input.
     * @param userInputStrings An array containing the words in the user's input.
     * @return The keyword (first word) of the user's input.
     */
    public String getKeyWord(String[] userInputStrings) {
        return userInputStrings[0];
    }

    /**
     * Processes the user's input and returns the response string.
     * @param taskList A TaskList object used to manage TooDoo's task list.
     * @param userInput The user's input string.
     * @return The response string generated by the command.
     */
    public String processUserInput(TaskList taskList, String userInput) {
        Keyword keyword;
        String[] splitUserInput = userInput.split(" ");
        String firstWord = splitUserInput[0];

        assert taskList != null : "TaskList should not be null";
        assert userInput != null : "User input should not be null";
        assert splitUserInput.length > 0 : "Input array should not be empty";

        try {
            keyword = Keyword.valueOf(firstWord.toUpperCase());
        } catch (IllegalArgumentException e) {
            keyword = Keyword.UNKNOWN;
        }

        try {
            switch (keyword) {
            case BYE:
                return "exit";
            case LIST:
                return taskList.toString();
            case MARK:
                return TaskListManipulationProcessor.handleMark(splitUserInput, taskList);
            case UNMARK:
                return TaskListManipulationProcessor.handleUnmark(splitUserInput, taskList);
            case TODO:
                String processedToDoString = ToDoProcessor.processToDoString(splitUserInput);

                assert processedToDoString != null : "Processed ToDo string should not be null";

                return taskList.addToDo(processedToDoString);
            case DEADLINE:
                String[] processedDeadlineString = DeadlineProcessor.processDeadlineString(splitUserInput);

                assert processedDeadlineString.length == 2 : "Deadline should return 2 elements";

                return taskList.addDeadline(processedDeadlineString[0], processedDeadlineString[1]);
            case EVENT:
                String[] processedEventString = EventProcessor.processEventString(splitUserInput);

                assert processedEventString.length == 3 : "Event should return 3 elements";

                return taskList.addEvent(processedEventString[0], processedEventString[1], processedEventString[2]);
            case DELETE:
                return TaskListManipulationProcessor.handleDelete(splitUserInput, taskList);
            case FIND:
                return TaskListManipulationProcessor.handleFind(splitUserInput, taskList);
            case SORT:
                return taskList.sortTasks();
            case UNKNOWN:
                throw new UnknownKeywordException(firstWord);
            default:
                throw new UnknownKeywordException(firstWord);
            }

        } catch (UnknownKeywordException | EmptyDescriptionException | EmptyDeadlineException
                | EmptyFromException | EmptyToException | EmptyRegexException | EmptyIndexException
                | DateTimeConflictException | IndexDoesNotExistException | TaskAlreadyMarkedException
                | TaskAlreadyUnmarkedException | EmptyTaskListException e) {
            return e.getMessage();
        } catch (NumberFormatException e) {
            return "Please provide a valid integer for the task number :(";
        }
    }
}
