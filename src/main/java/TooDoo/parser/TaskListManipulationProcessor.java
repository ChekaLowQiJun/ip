package toodoo.parser;

import toodoo.exceptions.EmptyIndexException;
import toodoo.exceptions.EmptyRegexException;
import toodoo.exceptions.IndexDoesNotExistException;
import toodoo.exceptions.TaskAlreadyMarkedException;
import toodoo.exceptions.TaskAlreadyUnmarkedException;
import toodoo.tasklist.TaskList;

/**
 * Process the user's input when task list manipulation Keywords are encountered.
 */
public class TaskListManipulationProcessor {

    /**
     * Handles the user's input when the mark Keyword is encountered and returns the response string.
     * @param splitUserInput An array containing the words in the user's input.
     * @param taskList A TaskList object used to manage TooDoo's task list.
     * @return Response string generated by marking the task.
     * @throws EmptyIndexException If the index to be marked is not specified.
     * @throws IndexDoesNotExistException If the index is out of bounds of the taskList.
     * @throws TaskAlreadyMarkedException If the task specified is already done.
     */
    public static String handleMark(String[] splitUserInput, TaskList taskList) throws EmptyIndexException,
            IndexDoesNotExistException, TaskAlreadyMarkedException {
        int index;

        if (splitUserInput.length == 1) {
            throw new EmptyIndexException();
        }

        index = Integer.parseInt(splitUserInput[1]) - 1;

        return taskList.mark(index);
    }

    /**
     * Handles the user's input when the unmark Keyword is encountered and returns the response string.
     * @param splitUserInput An array containing the words in the user's input.
     * @param taskList A TaskList object used to manage TooDoo's task list.
     * @return Response string generated by unmarking the task.
     * @throws EmptyIndexException If the index to be unmarked is not specified.
     * @throws IndexDoesNotExistException If the index is out of bounds of the taskList.
     * @throws TaskAlreadyUnmarkedException If the task specified is already marked as not done.
     */
    public static String handleUnmark(String[] splitUserInput, TaskList taskList) throws EmptyIndexException,
            IndexDoesNotExistException, TaskAlreadyUnmarkedException {
        int index;

        if (splitUserInput.length == 1) {
            throw new EmptyIndexException();
        }

        index = Integer.parseInt(splitUserInput[1]) - 1;

        return taskList.unmark(index);
    }

    /**
     * Handles the user's input when the delete Keyword is encountered and returns the response string.
     * @param splitUserInput An array containing the words in the user's input.
     * @param taskList A TaskList object used to manage TooDoo's task list.
     * @return Response string generated by deleting the task.
     * @throws EmptyIndexException If the index to be deleted is not specified.
     * @throws IndexDoesNotExistException If the index is out of bounds of the taskList.
     */
    public static String handleDelete(String[] splitUserInput, TaskList taskList) throws EmptyIndexException,
            IndexDoesNotExistException {
        int index;

        if (splitUserInput.length == 1) {
            throw new EmptyIndexException();
        }

        index = Integer.parseInt(splitUserInput[1]) - 1;

        return taskList.delete(index);
    }

    /**
     * Handles the user's input when the find Keyword is encountered and returns the response string.
     * @param splitUserInput An array containing the words in the user's input.
     * @param taskList A TaskList object used to manage TooDoo's task list.
     * @return Response string generated by finding the task.
     * @throws EmptyRegexException If the regex to find is not specified.
     */
    public static String handleFind(String[] splitUserInput, TaskList taskList) throws EmptyRegexException {
        if (splitUserInput.length == 1) {
            throw new EmptyRegexException();
        }
        return taskList.find(splitUserInput[1]);
    }

}
